#
# Copyright (c) 2021 Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e. V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

prefix idstt: <https://w3id.org/idsa/transformationtemplates/>

template idstt:bean-default-methods (?class) {

    # "\n\t/**"
    # "\n\t* This function retrieves the ID of the current object (can be set via the constructor of the builder class)"
    # "\n\t* @return ID of current object as URI"
    # "\n\t*/"
    # "\n\t@JsonProperty(\"@id\")"
    # "\n\tfinal public URI getId() {"
    # "\n\t\treturn id;"
    # "\n\t}"
    # "\n"

    # "\n\t/**"
    # "\n\t* This function retrieves a human readable labels about the current class, as defined in the ontology."
    # "\n\t* This label could, for example, be used as a field heading in a user interface"
    # "\n\t* @return Human readable labels"
    # "\n\t*/"
    # "\n\tpublic List<TypedLiteral> getLabels() {"
    # "\n\t\treturn this.labels;"
    # "\n\t}"
    # "\n"

    # "\n\t/**"
    # "\n\t* This function retrieves a human readable explanatory comment about the current class, as defined in the ontology."
    # "\n\t* This comment could, for example, be used as a tooltip in a user interface"
    # "\n\t* @return Human readable explanatory comments"
    # "\n\t*/"
    # "\n\tpublic List<TypedLiteral> getComments() {"
    # "\n\t\treturn this.comments;"
    # "\n\t}"
    # "\n"

    # method implementation

    st:call-template(idstt:get-class-to-hash-code, ?class, false)
    st:call-template(idstt:get-class-equals, ?class, false)
}
where {}
