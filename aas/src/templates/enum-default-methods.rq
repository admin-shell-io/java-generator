prefix idstt: <https://w3id.org/idsa/transformationtemplates/>

template idstt:enum-default-methods(?class) {

    #"\n"
	#"\n\t" st:call-template(idstt:to_enum_name, ?class) "(String id, List<TypedLiteral> labels, List<TypedLiteral> comments) {"
	#"\n\t\ttry {"
	#"\n\t\t\tthis.id = new URI(id);"
	#"\n\t\t\tthis.labels = labels;"
	#"\n\t\t\tthis.comments = comments;"
    #"\n\t\t}"
    #"\n\t\tcatch (java.net.URISyntaxException e) {"
    #"\n\t\t\tthrow new IllegalArgumentException(e);"
    #"\n\t\t}"
	#"\n\t}"

    #"\n\t/**"
    #"\n\t* This function retrieves the ID of the current object (can be set via the constructor of the builder class)"
    #"\n\t* @return ID of current object as URI"
    #"\n\t*/"
    #"\n"
	#"\n\t@JsonIgnore"
    #"\n\tfinal public URI getId() {"
    #"\n\t\treturn id;"
    #"\n\t}"
	#"\n"

    #"\n\t/**"
    #"\n\t* This function retrieves a human readable labels about the current class, as defined in the ontology."
    #"\n\t* This label could, for example, be used as a field heading in a user interface"
    #"\n\t* @return Human readable labels"
    #"\n\t*/"
	#"\n\t@JsonIgnore"
    #"\n\tfinal public List<TypedLiteral> getLabels() {"
    #"\n\t\treturn labels;"
    #"\n\t}"
	#"\n"

    #"\n\t/**"
    #"\n\t* This function retrieves a human readable explanatory comments about the current class, as defined in the ontology."
    #"\n\t* This comment could, for example, be used as a tooltip in a user interface"
    #"\n\t* @return Human readable explanatory comments"
    #"\n\t*/"
	#"\n\t@JsonIgnore"
    #"\n\tfinal public List<TypedLiteral> getComments() {"
    #"\n\t\treturn comments;"
    #"\n\t}"
	#"\n"

    #"\n"
    ##"\n\t@JsonProperty(\"@id\")"
    #"\n\tfinal public URI getSerializedId() {"
    ## TODO: Use Namespaces if possible (do not hard-code IDSC!)
    #"\n\t\treturn id;"
    #"\n\t}"
    #"\n\t"

    # @ REMOVE ??
    # "\n"
    # "\n\t@JsonCreator"
    # "\n\tpublic static " st:call-template(idstt:to_enum_name, ?class) " deserialize(JsonNode node) {"
    # "\n\t\treturn uriInstanceMapping.get(node.has(\"@id\") ? node.get(\"@id\").textValue() : node.textValue());"
    # "\n\t}"

    #"\n"
	#"\n\t@Override"
	#"\n\tpublic String toString() {"
	#	"\n\t\treturn id.toString();"
	#"\n\t}"

}
where {}