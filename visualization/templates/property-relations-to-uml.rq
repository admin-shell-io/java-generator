prefix ids: <https://w3id.org/idsa/core/>
prefix idstt: <https://w3id.org/idsa/transformationtemplates/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix sh: <http://www.w3.org/ns/shacl#>

# Lists the properties that define a relation between two classes in the namespace of the given ontology with their defined cardinalities.

template idstt:property-relations-to-uml {

    "\n"

    st:call-template(idstt:to_class_name, ?domain)

    " --> "

    st:call-template(idstt:uml-headlabel, ?domain, ?property)

    st:call-template(idstt:to_class_name, ?range)

    ": "

    st:call-template(idstt:to_class_name, ?property)

    if (bound(?refByUri) && (?refByUri = true), " # URI ref ", " # local ref")

}
where {
    ?property rdfs:domain ?domain;
        rdfs:range ?range.

    OPTIONAL {
      ?domain rdfs:subClassOf* ?superClass .
      ?classShape sh:targetClass ?superClass ;
        (sh:xone|sh:or)*/rdf:rest*/rdf:first*/sh:property ?propertyShape .
      ?propertyShape sh:path ?property ;
        (sh:xone|sh:or)*/rdf:rest*/rdf:first*/sh:nodeKind ?propertyKind .
    }

    OPTIONAL {
      ?domain rdfs:subClassOf* ?superClass .
      ?classShape sh:targetClass ?superClass ;
        (sh:xone|sh:or)*/rdf:rest*/rdf:first*/sh:property ?propertyShape .
      ?propertyShape sh:path ?property ;
        (sh:xone|sh:or)*/rdf:rest*/rdf:first*/sh:datatype ?propertyType .
    }

    BIND(
      IF(
        (BOUND(?propertyType) && (?propertyType != ?range) && (?propertyType = xsd:anyURI)) ||
        (BOUND(?propertyKind) && (?propertyKind = sh:IRI)),
      # THEN
      true,
      # ELSE
      false
      ) AS ?refByUri
    )
    BIND( st:get-namespace() as ?ns )
    FILTER(strstarts(str(?domain), str(?ns)) && strstarts(str(?range), str(?ns)))
}