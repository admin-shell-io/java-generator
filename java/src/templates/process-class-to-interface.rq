prefix idstt: <https://w3id.org/idsa/transformationtemplates/>
prefix ids: <https://w3id.org/idsa/core/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

template idstt:process-class-to-interface(?class) {

    "package de.fraunhofer.iais.eis;"
    "\n"

    st:call-template(idstt:basic-imports)

    "\n\n"

    "/**" st:call-template(idstt:anything-to-comment, ?class) "*/"
    "\n@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, property=\"@type\")"
    "\n@JsonSubTypes({" st:call-template(idstt:class-to-json-annotation, ?class) "})"
    "\n"
    "public interface " st:call-template(idstt:to_class_name, ?class)

    if (bound(?superClass),
        concat(" extends ", strafter(st:call-template(idstt:subclasses-to-list, ?class), ", ")),
        "")

    " {\n"

        "\n\t// standard methods\n"

        "\n\t@JsonProperty(\"@id\")"
        "\n\t@javax.validation.constraints.NotNull URI getId();"
		"\n\tjava.util.List<TypedLiteral> getLabel();"
		"\n\tjava.util.List<TypedLiteral> getComment();"
        "\n\tString toRdf();"
        "\n"
        "\n\t// getter and setter for generic property map"
        "\n\tpublic java.util.Map<String,Object> getProperties();"
        "\n\tpublic void setProperty(String property, Object value);"
        "\n"
        "\n\t// accessor methods as derived from information model"
        "\n"

        st:call-template(idstt:properties-to-interface-methods, ?class)

    "\n}\n"

}
where {
    ?class a owl:Class .

    BIND( st:get-namespace() as ?ns )
    BIND( st:get-namespace-prefix() as ?prefix )

    optional {
        ?class rdfs:subClassOf ?superClass.
        filter(strstarts(str(?superClass), str(?ns)))
    }
}
GROUP BY ?class
