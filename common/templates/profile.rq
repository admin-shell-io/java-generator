prefix idstt: <https://w3id.org/idsa/transformationtemplates/>

# Helper template which defines functions available for all other templates.
# This allows for the dynamic definition of a ontology namespace and prefix from the
# pom.xml in the main directory via <property> tags.

template st:profile {}
where {}

function st:get-namespace() {
   "${ontology.namespace}"
}

function st:get-namespace-prefix() {
   "${ontology.namespace.prefix}"
}

function st:get-title() {
   "${ontology.title}"
}

function st:has-builder-with-map() {
   if (contains("${ontology.namespace.prefix}", "aas"),
      # for AAS -> don't create this builders ?? But test for now
      true,
      if (contains("${ontology.namespace.prefix}", "ids"),
         # for IDS -> create map based builders
         true,
         # default assumption for other ontology -> currently don't use this feature
         false
      )
   )
}

function st:has-mixin() {
   if (contains("${ontology.namespace.prefix}", "aas"),
      # for AAS -> create Mixins
      true,
      if (contains("${ontology.namespace.prefix}", "ids"),
         # for IDS -> currently not
         false,
         # default assumption for other ontology -> currently not
         false
      )
   )
}

function st:has-id-label-comment() {
   if (contains("${ontology.namespace.prefix}", "aas"),
      # for AAS -> no IDs, labels or comments
      false,
      if (contains("${ontology.namespace.prefix}", "ids"),
         # for IDS -> yes
         true,
         # default assumption for other ontology -> follow RDF standard
         true
      )
   )
}

function st:has-superclass-of-all-classes() {
   if (contains("${ontology.namespace.prefix}", "aas"),
      # for AAS -> Yet unclear, possibly not
      true,
      if (contains("${ontology.namespace.prefix}", "ids"),
         # for IDS -> yes
         true,
         # default assumption for other ontology -> yes
         true
      )
   )
}

function st:use-langString-over-typedLiteral() {
   if (contains("${ontology.namespace.prefix}", "aas"),
      # for AAS -> no usage of TypedLiteral wanted
      true,
      if (contains("${ontology.namespace.prefix}", "ids"),
         # for IDS -> no, we want to use TypedLiteral instead
         false,
         # default assumption for other ontology -> same as for IDS
         false
      )
   )
}

function st:add-jackson-annotations() {
   if (contains("${ontology.namespace.prefix}", "aas"),
      # for AAS -> no serialization specific information wanted
      false,
      if (contains("${ontology.namespace.prefix}", "ids"),
         # for IDS -> yes, RDF serializer depends on it
         true,
         # default assumption for other ontology -> same as for IDS
         true
      )
   )
}