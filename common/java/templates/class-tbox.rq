#
# Copyright (c) 2021 Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e. V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

prefix idstt: <https://w3id.org/idsa/transformationtemplates/>
prefix dcat: <http://www.w3.org/ns/dcat#>
prefix sh: <http://www.w3.org/ns/shacl#>

template idstt:class-tbox(?class) {

    if (?isAbstract,
      # then
          "",
      # else
          kg:write(
              concat("/tmp/", st:call-template(idstt:package-to-path, 'bean'), st:call-template(idstt:to_bean_name, ?class), ".java"),
              st:call-template(idstt:process-class-to-bean, ?class)
          )
      )


      if (?isAbstract,
      # then
          "",
      # else
        if (?hasMap,
            kg:write(
              concat("/tmp/", st:call-template(idstt:package-to-path, 'builder'), st:call-template(idstt:to_builder_name, ?class), ".java"),
              st:call-template(idstt:process-class-to-builder-with-map, ?class)
            ),
            if(?hasExtendable,
                kg:write(
                    concat("/tmp/", st:call-template(idstt:package-to-path, 'builder'), st:call-template(idstt:to_builder_name, ?class), ".java"),
                    st:call-template(idstt:process-class-to-abstract-builder, ?class)
                ),
                kg:write(
                    concat("/tmp/", st:call-template(idstt:package-to-path, 'builder'), st:call-template(idstt:to_builder_name, ?class), ".java"),
                    st:call-template(idstt:process-class-to-builder, ?class)
                )
            )
        ) 
      )

      if (?hasMixin,
      # then
          kg:write(
              concat("/tmp/", st:call-template(idstt:package-to-path, 'mixin'), st:call-template(idstt:to_mixin_name, ?class), ".java"),
              st:call-template(idstt:process-class-to-mixin, ?class)
          ),
      # else
          ""
      )

    kg:write(
        concat("/tmp/", st:call-template(idstt:package-to-path, 'interface'), st:call-template(idstt:to_interface_name, ?class), ".java"),
        st:call-template(idstt:process-class-to-interface, ?class)
    )

}
where  {
    ?class a owl:Class.
    BIND( st:has-builder-with-map() as ?hasMap )
    BIND( st:has-extendable-builder() as ?hasExtendable )
    BIND( st:call-template(idstt:class-is-abstract, ?class) AS ?isAbstract )
    BIND( st:has-mixin() AS ?hasMixin )
}
