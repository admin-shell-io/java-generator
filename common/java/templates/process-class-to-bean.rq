#
# Copyright (c) 2021 Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e. V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

prefix idstt: <https://w3id.org/idsa/transformationtemplates/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

template idstt:process-class-to-bean(?class) {

    "package de.fraunhofer.iais.eis;\n"

    st:call-template(idstt:basic-imports)

    "\n"
    "\n"
    "/** " st:call-template(idstt:anything-to-comment, ?class, false) " \n*/\n"
    "@JsonIgnoreProperties(ignoreUnknown = true)\n"
    "@JsonTypeName(\"" st:call-template(idstt:to_full_identifier, ?class) "\")"
    "\n"
    "public class " st:call-template(idstt:to_bean_name, ?class)
    " implements " st:call-template(idstt:to_interface_name, ?class)

    " {\n"

    # add default properties for all beans
    st:call-template(idstt:bean-default-properties, ?class)

    "\n\n\t// instance fields as derived from the " st:get-title() " ontology\n"
    st:call-template(idstt:subclass-properties-to-fields, ?class)

    "\n"
    "\n\t// no manual construction"
    "\n\tprotected " st:call-template(idstt:to_bean_name, ?class) "() {"
    "\n\t\tid = VocabUtil.getInstance().createRandomUrl(\""
                             lcase(substr(st:call-template(idstt:to_class_name, ?class), 1, 1)) substr(st:call-template(idstt:to_class_name, ?class), 2)
                             "\");"
    "\n\t}"
    "\n"

    # add default methods for all beans
    st:call-template(idstt:bean-default-methods, ?class)

    if (STRLEN(STR(?subclassPropertyMethods)) > 1,
        CONCAT(CONCAT(CONCAT("\n\n\t// accessor method implementations as derived from the ", st:get-title()), " ontology\n\n"), STR(?subclassPropertyMethods)),
        ""
    )

    "\n}\n"

}
where{
    ?class a owl:Class .

    BIND (st:call-template(idstt:subclass-properties-to-methods, ?class, 'bean') as ?subclassPropertyMethods )
}
GROUP BY ?class
