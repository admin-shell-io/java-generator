prefix idstt: <https://w3id.org/idsa/transformationtemplates/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

template idstt:process-class-to-bean(?class) {

    "package de.fraunhofer.iais.eis;\n"

    st:call-template(idstt:basic-imports)

    "\n"
    "\n"
    "/** " st:call-template(idstt:anything-to-comment, ?class) " */\n"
    "@JsonIgnoreProperties(ignoreUnknown = true)\n"
    "@JsonTypeName(\"" st:call-template(idstt:to_full_identifier, ?class) "\")"
    "\n"
    "public class " concat(st:call-template(idstt:to_class_name, ?class), "Impl")
    " implements Serializable, " st:call-template(idstt:to_class_name, ?class)

    " {\n"
    # boilerplate methods

    "\n\t@JsonProperty(\"@id\")"
    "\n\t@JsonAlias({\"@id\", \"id\"})"
    "\n\t@javax.validation.constraints.NotNull URI id;"
    "\n"
	
	#Add the labels
	"\n\t//List of all labels of this class"
	"\n\t@JsonIgnore"
	"\n\tjava.util.List<TypedLiteral> label = "
	if(STRLEN(st:call-template(idstt:get-all-labels, ?class)) > 1,
		#"yes": create List containing all labels, split by comma. Then remove last character, which is an unwanted comma
		CONCAT(CONCAT("Arrays.asList(",
		SUBSTR(str(st:call-template(idstt:get-all-labels, ?class)), 0, STRLEN(str(st:call-template(idstt:get-all-labels, ?class))) - 1)), 
		");"),
		#"no": create empty list
		"java.util.Collections.emptyList();")
	
	"\n\t//List of all comments of this class"
	"\n\t@JsonIgnore"
	"\n\tjava.util.List<TypedLiteral> comment = "
	if(STRLEN(st:call-template(idstt:get-all-comments, ?class)) > 1,
		#"yes": create List containing all comments, split by comma. Then remove last character, which is an unwanted comma
		CONCAT(CONCAT("Arrays.asList(",
		SUBSTR(str(st:call-template(idstt:get-all-comments, ?class)), 0, STRLEN(str(st:call-template(idstt:get-all-comments, ?class))) - 1)), 
		");"),
		#"no": create empty list
		"java.util.Collections.emptyList();")
		

    "\n\n\t// all classes have a generic property array"
	"\n\t@JsonIgnore"
    "\n\tjava.util.Map<String,Object> properties;"

    "\n\n\t// instance fields as derived from information model\n"
    st:call-template(idstt:subclass-properties-to-fields, ?class)

    "\n"
    "\n\t// no manual construction"
    "\n\t" st:call-template(idstt:to_class_name, ?class) "Impl() {"
    "\n\t\tid = VocabUtil.getInstance().createRandomUrl(\""
                             lcase(substr(st:call-template(idstt:to_class_name, ?class), 1, 1)) substr(st:call-template(idstt:to_class_name, ?class), 2)
                             "\");"
    "\n\t}"
    "\n"
    "\n\t@JsonProperty(\"@id\")"
    "\n\tfinal public URI getId() {"
    "\n\t\treturn id;"
    "\n\t}"
    "\n"
    "\n\tpublic String toRdf() {"
    "\n\t\treturn VocabUtil.getInstance().toRdf(this);"
    "\n\t}"
    "\n"
    "\n\tpublic java.util.List<TypedLiteral> getLabel() {"
    "\n\t\treturn this.label;"
    "\n\t}"
    "\n"
    "\n\tpublic java.util.List<TypedLiteral> getComment() {"
    "\n\t\treturn this.comment;"
    "\n\t}"
    "\n"
    # method implementation

    "\n\t// getter and setter for generic property map"
    "\n\t@JsonAnyGetter"
    "\n\tpublic java.util.Map<String,Object> getProperties() {"
	"\n\t\tif (this.properties == null) return null;"
	"\n\t\tIterator<String> iter = this.properties.keySet().iterator();"
	"\n\t\tjava.util.Map<String,Object> resultset = new HashMap<String, Object>();"
	"\n\t\twhile (iter.hasNext()) {"
	"\n\t\t\tString key = iter.next();"
	"\n\t\t\tresultset.put(key,urifyObjects(this.properties.get(key)));"
	"\n\t\t}"
	"\n\t\treturn resultset ;"
	"\n\t}"
    "\n"
	"\n\tpublic Object urifyObjects(Object value) {"
	"\n\t\tif (value instanceof String && value.toString().startsWith(\"http\")) {"
	"\n\t\t\ttry {"
	"\n\t\t\t\tvalue = new URI(value.toString());"
	"\n\t\t\t} catch (Exception e) { /* do nothing */ }"
	"\n\t\t} else if (value instanceof ArrayList) {"
	"\n\t\t\tArrayList<Object> result_array = new ArrayList<Object>();"
    "\n\t\t\t((ArrayList) value).forEach(x -> result_array.add(urifyObjects(x)));"
    "\n\t\t\treturn result_array;"
	"\n\t\t} else if (value instanceof java.util.Map) {"
	"\n\t\t\tjava.util.Map<String, Object> result_map = new HashMap<String, Object>();"
    "\n\t\t\t((java.util.Map) value).forEach((k,v) -> result_map.put(k.toString(), urifyObjects(v)));"
    "\n\t\t\treturn result_map;"
	"\n\t\t}"
	"\n\t\treturn value;"
	"\n\t}"
    "\n"
    "\n\t@JsonAnySetter"
    "\n\tpublic void setProperty(String property, Object value) {"
    "\n\tif (this.properties == null) this.properties = new java.util.HashMap<String,Object>();"
    "\n\tif (property.startsWith(\"@\")) {return ;};"
    "\n\tthis.properties.put(property, value) ;"
    "\n\t}"

    "\n\t// accessor method implementations as derived from information model"
    "\n"
    st:call-template(idstt:subclass-properties-to-methods, ?class, 'bean')

    "\n}\n"

}
where{
    ?class a owl:Class .
}
GROUP BY ?class
