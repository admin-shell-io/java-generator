#
# Copyright (c) 2021 Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e. V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

prefix idstt: <https://w3id.org/idsa/transformationtemplates/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

template idstt:process-class-to-enum(?class) {

    st:call-template(idstt:get-license)
    st:call-template(idstt:get-package, 'interface')

    st:call-template(idstt:basic-imports)
    "\nimport com.fasterxml.jackson.databind.JsonNode;"

    "\nimport java.util.stream.Collectors;"
    "\nimport java.util.stream.Stream;"

    "\n\n"

    "/** " st:call-template(idstt:anything-to-comment, ?class, false) " \n*/"
    if(?useJackson,
        #then
        CONCAT(
            "\n@JsonFormat(shape = JsonFormat.Shape.OBJECT)\n@JsonTypeName(\"",
            st:call-template(idstt:to_full_identifier, ?class),
            "\")"
        ),
        #else
        CONCAT(
            "\n@IRI(\"",
            st:call-template(idstt:to_full_identifier, ?class),
            "\")"
        )
    )
    "\npublic enum " st:call-template(idstt:to_enum_name, ?class) " "
	if(?hasModelSuperclass,
		"implements ModelClass ",
		""
	)
	"{\n"

    # Print all individuals and delete the last comma (must be replaced with a semi colon)
	if(STRLEN(st:call-template(idstt:process-enum-individuals, ?class)) > 2,
    SUBSTR(st:call-template(idstt:process-enum-individuals, ?class), 0, STRLEN(st:call-template(idstt:process-enum-individuals, ?class)) - 1),
	st:call-template(idstt:process-enum-individuals, ?class))

    ";"

    # add enum default properties
    st:call-template(idstt:enum-default-properties, ?class)

	# add enum default methods
    st:call-template(idstt:enum-default-methods, ?class)

    # superclass methods
    "\n"
    st:call-template(idstt:subclass-properties-to-methods, ?class, 'enum')

    "\n}\n"

}
WHERE {
    BIND(st:add-jackson-annotations() AS ?useJackson)
	BIND( st:has-superclass-of-all-classes() as ?hasModelSuperclass )
}
