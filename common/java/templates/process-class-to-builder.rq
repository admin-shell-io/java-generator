#
# Copyright (c) 2021 Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e. V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

prefix idstt: <https://w3id.org/idsa/transformationtemplates/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

template idstt:process-class-to-builder(?class) {

    st:call-template(idstt:get-license)
    st:call-template(idstt:get-package, 'builder')

    st:call-template(idstt:basic-imports)

    "\n"
    "\n"
    "public class " st:call-template(idstt:to_builder_name, ?class) " implements Builder<" st:call-template(idstt:to_interface_name, ?class) ">"

    " {\n"

    "\n\tprivate " st:call-template(idstt:to_bean_name, ?class) " "

    lcase(substr(st:call-template(idstt:to_bean_name, ?class), 1, 1))
    substr(st:call-template(idstt:to_bean_name, ?class), 2)

    ";"

    # constructor

    "\n"
    "\n\tpublic " st:call-template(idstt:to_builder_name, ?class) "() {"
    "\n\t\t"
        lcase(substr(st:call-template(idstt:to_bean_name, ?class), 1, 1)) substr(st:call-template(idstt:to_bean_name, ?class), 2) " = new " st:call-template(idstt:to_bean_name, ?class) "();"
    "\n\t}"
    "\n"
    "\n\tpublic " st:call-template(idstt:to_builder_name, ?class) "(URI id) {"
    "\n\t\t"
    "this();"
    "\n\t\t"
    lcase(substr(st:call-template(idstt:to_bean_name, ?class), 1, 1)) substr(st:call-template(idstt:to_bean_name, ?class), 2) ".id = id;"
    "\n\t}"

    # method implementation

    st:call-template(idstt:subclass-properties-to-methods, ?class, 'builder')

    # build method

    "\n\n\t/**"
    "\n\t* This function takes the values that were set previously via the other functions of this class and turns them into a Java bean."
    "\n\t* @return Bean with specified values"
    "\n\t* @throws ConstraintViolationException This exception is thrown, if a validator is used and a violation is found."
    "\n\t*/"
    "\n\t@Override"
    "\n\tpublic " st:call-template(idstt:to_interface_name, ?class) " build() throws ConstraintViolationException {"
    "\n\t\tVocabUtil.getInstance().validate(" lcase(substr(st:call-template(idstt:to_bean_name, ?class), 1, 1)) substr(st:call-template(idstt:to_bean_name, ?class), 2) ");"
    "\n\t\treturn " lcase(substr(st:call-template(idstt:to_bean_name, ?class), 1, 1)) substr(st:call-template(idstt:to_bean_name, ?class), 2) ";"
    "\n\t}"

    "\n}\n"

}
where {}
