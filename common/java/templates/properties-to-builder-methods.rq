#
# Copyright (c) 2021 Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e. V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

prefix idstt: <https://w3id.org/idsa/transformationtemplates/>

template idstt:properties-to-builder-methods(?class, ?superClass) {

	# Iterates on selected properties and writes getter and setter methods

    "\n"
    "\n\t/**"
    "\n\t* This function allows setting a value for "
    st:call-template(idstt:to_java_field_name, ?property, ?superClass)
    "\n\t* @param "
    st:call-template(idstt:to_java_param_name, ?property, ?superClass)
    " desired value to be set"
    "\n\t* @return Builder object with new value for "
    st:call-template(idstt:to_java_field_name, ?property, ?superClass)
    "\n\t*/"
	"\n\t"

    # visibility modifier -> not final to enable builder inheritance
    "public "

    # return type and name
    if(?hasExtendable,
        "B ",
        concat(st:call-template(idstt:to_builder_name, ?class), " ")
    )

    # method body
	st:call-template(idstt:property-to-setter-method, ?property, ?class, 'builder')
    if (?hasMap,
        st:call-template(idstt:setter-method-builder-body-with-map, ?property, ?class),
	    if (?hasExtendable,
            st:call-template(idstt:setter-method-extendable-builder-body, ?property, ?class, false),
            st:call-template(idstt:setter-method-builder-body, ?property, ?class, false)
        )
    )

    if(?isArray,
        st:call-template(idstt:setter-method-builder-list-single-element, ?property, ?class),
        ""
    )

}
where  {
      {?property rdfs:domain ?superClass.}
      UNION
      {?property rdfs:domain/owl:unionOf/rdf:rest*/rdf:first ?superClass.}
      BIND( st:has-builder-with-map() as ?hasMap )
      BIND( st:has-extendable-builder() as ?hasExtendable )
      BIND( st:call-template(idstt:property-allows-list, ?property, ?class) as ?isArray )
}
