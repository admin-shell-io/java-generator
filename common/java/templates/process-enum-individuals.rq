prefix idstt: <https://w3id.org/idsa/transformationtemplates/>
prefix dct: <http://purl.org/dc/terms/>

template idstt:process-enum-individuals(?class) {

	"\t/** "
	st:call-template(idstt:anything-to-comment, ?individual)
	" */"

    "\n\t"
    ucase(st:call-template(idstt:to_class_name, ?individual))

    "(\"" str(?individual) "\", "
	# Test whether the result is empty, i.e. if the instane has labels
	if(STRLEN(st:call-template(idstt:get-all-labels, ?individual)) > 1,
		# THEN: create List containing all labels, split by comma. Then remove last character, which is an unwanted comma
		CONCAT(CONCAT("Arrays.asList(",
		SUBSTR(str(st:call-template(idstt:get-all-labels, ?individual)), 0, STRLEN(str(st:call-template(idstt:get-all-labels, ?individual))) - 1)),
		"), "),
		# ELSE: create empty list
		"java.util.Collections.emptyList(), ")


	# Same for comments
	if(STRLEN(st:call-template(idstt:get-all-comments, ?individual)) > 1,
		# THEN: create List containing all comments, split by comma. Then remove last character, which is an unwanted comma
		CONCAT(CONCAT("Arrays.asList(",
		SUBSTR(str(st:call-template(idstt:get-all-comments, ?individual)), 0, STRLEN(str(st:call-template(idstt:get-all-comments, ?individual))) - 1)),
		")"),
		# ELSE: create empty list
		"java.util.Collections.emptyList()")
	"),"
}
where  {
	?classOrSubClass rdfs:subClassOf* ?class.
	
	optional {
		?classIndividual a ?classOrSubClass.
	}

	optional {
		?class (owl:oneOf/rdf:rest*/rdf:first*) ?owlIndividual.
		?owlIndividual a ?classOrSubClass.
		filter(!isBlank(?owlIndividual) )
	}	
	
	BIND( if (bound(?owlIndividual), ?owlIndividual, ?classIndividual) as ?individual )
}
GROUP BY ?individual
ORDER BY ?individual
